<apex:page standardController="Game__c" extensions="PlayGameController" sidebar="false" lightningStylesheets="true">

<apex:includeScript value="/soap/ajax/34.0/connection.js"/>
<apex:includeScript value="/soap/ajax/34.0/apex.js"/>
<apex:includeScript value="{!URLFOR($Resource.jquery_1_11_1_min)}" />

<apex:outputPanel id="globalVars">
    <script type="text/javascript">
        
        var allCellsMap = JSON.parse('{!allCellsJson}');
        
        var namespace = '';
        var turn = '{!gameRecord.Player_Turn__c}';
        var isUser1 = '{!isCurrentUser1}';
        var isUser2 = '{!isCurrentUser2}';
        var gameId = '{!gameRecord.Id}';
        console.log('turn : '+ turn );
        console.log('isUser1 : '+ isUser1 );
        console.log('isUser2 : '+ isUser2 );
        
        /*if((turn === 'P2' && isUser1 === 'true')
            || (turn === 'P1' && isUser2 === 'true')
            || (isUser1 === 'false' && isUser2 === 'false')) {
            console.log('STARTING TIMER');
            //start timer
            var interval = setInterval(function(){
                sforce.connection.sessionId = '{!$Api.Session_ID}'; 
                
                var expectingNextTurn = turn == 'P2' ? 'P1' : 'P2';
                var result = sforce.connection.query('select ' + namespace + 'Player_Turn__c from ' + namespace + 'Game__c where Id=\'' + gameId +  '\' and ' + namespace + 'Player_Turn__c = \'' + expectingNextTurn + '\'');
                var records = result.getArray("records");
            
                if(records[0] != undefined){
                    clearInterval(interval);
                    refreshBoardJS();
                }
            }, 3000);
        }*/
    </script>
</apex:outputPanel>

<style>
div.boardstyle table, div.boardstyle tr, div.boardstyle td{
    /*border: 1px solid black;*/
}
.movementsPanel{
    margin-left: 25%;
    margin-top: 25%;
}
div.movementsPanel table, div.movementsPanel tr, div.movementsPanel th, div.movementsPanel td{
    border: 1px solid black;
    text-align: center;
}
div.boardstyle td {
    width: 60px;
    height: 60px;
}
.evenbg {
    background: #543f1f;
}
.oddbg {
    background: #c9b495;
}
.player1Tool {
    background: white;
    width: 50px;
    height: 50px;
    border-radius: 50%;
    margin-left: 5px;
    margin-top: 5px;
    cursor: pointer;
}
.player2Tool {
    background: black;
    width: 50px;
    height: 50px;
    border-radius: 50%;
    margin-left: 5px;
    margin-top: 5px;
    cursor: pointer;
}
.optionalMoveP1 {
    background: white;
    width: 50px;
    height: 50px;
    border-radius: 50%;
    margin-left: 5px;
    margin-top: 5px;
    opacity: 25%;
}
.optionalMoveP2 {
    background: black;
    width: 50px;
    height: 50px;
    border-radius: 50%;
    margin-left: 5px;
    margin-top: 5px;
    opacity: 25%;
}
.kingStyle{
    font-size: 34px;
    font-weight: bold;
    text-align: center;
}
.boardTitle{
    text-align: center;
    font-weight: bold;
    font-size: 26px;
}
.playerImg{
    text-align: center;
    margin: 5%;
}
.playerImgBorder{
    border: 3px solid green;
}
.playerWaitImgBorder{
    border: 3px solid black;
}
</style>

<script>
$j = jQuery.noConflict();

var clickedToolRow;
var clickedToolCol;
var clickedOptions;

function cellClicked(player, row, col){
    
    clickedToolRow = row;
    clickedToolCol = col;
    clickedOptions = '';
    
    if(allCellsMap[row + '_' + col].isKing) {
        findKingOptions(player, row, col);
    }
    else{
    
        if(player == 1){
            var rightCellRow = row - 1;
            var rightCellCol = col + 1;
            
            var leftCellRow = row - 1;
            var leftCellCol = col - 1;
        
            //Reset all, if any option was show before
            $j('.optionalMoveP1').css('display', 'none');
            $j('.optionalMoveP1').removeClass('eatCls');
        
            if(rightCellRow > 0 && rightCellCol <= 8){
                if(allCellsMap[rightCellRow + '_' + rightCellCol].status == 'E'){
                    $j('.cl_p1_' + (rightCellRow) + '_' + (rightCellCol)).css('display', 'block');
                }
                else if(allCellsMap[rightCellRow + '_' + rightCellCol].status == 'P2') {
                    if(rightCellRow - 1 > 0 
                        && rightCellCol + 1 <=8 
                        && allCellsMap[(rightCellRow - 1) + '_' + (rightCellCol + 1)].status == 'E'){
                        $j('.cl_p1_' + (rightCellRow - 1) + '_' + (rightCellCol + 1)).css('display', 'block');
                        $j('.cl_p1_' + (rightCellRow - 1) + '_' + (rightCellCol + 1)).addClass('eatCls');
                    }
                }
            }
            if(leftCellRow > 0 && leftCellCol > 0){
                if(allCellsMap[leftCellRow + '_' + leftCellCol].status == 'E'){
                    $j('.cl_p1_' + (leftCellRow) + '_' + (leftCellCol)).css('display', 'block');
                }
                else if(allCellsMap[leftCellRow + '_' + leftCellCol].status == 'P2') {
                    if(leftCellRow - 1 > 0
                        && leftCellCol- 1 > 0
                        && allCellsMap[(leftCellRow - 1)  + '_' + (leftCellCol- 1)].status == 'E'){
                        $j('.cl_p1_' + (leftCellRow - 1) + '_' + (leftCellCol - 1)).css('display', 'block');
                        $j('.cl_p1_' + (leftCellRow - 1) + '_' + (leftCellCol - 1)).addClass('eatCls');
                    }
                }
            }
        }
        else if(player == 2){
            var rightCellRow = row + 1;
            var rightCellCol = col - 1;
    
            var leftCellRow = row + 1;
            var leftCellCol = col + 1;
            
            //Reset all, if any option was show before
            $j('.optionalMoveP2').css('display', 'none');
            $j('.optionalMoveP2').removeClass('eatCls');
                
            if(rightCellRow <= 8 && rightCellCol > 0){
                if(allCellsMap[rightCellRow + '_' + rightCellCol].status == 'E'){
                    $j('.cl_p2_' + (rightCellRow) + '_' + (rightCellCol)).css('display', 'block');
                }
                else if(allCellsMap[rightCellRow + '_' + rightCellCol].status == 'P1') {
                    if(rightCellRow + 1 <= 8
                        && rightCellCol - 1 > 0
                        && allCellsMap[(rightCellRow + 1) + '_' + (rightCellCol - 1)].status == 'E'){
                        $j('.cl_p2_' + (rightCellRow + 1) + '_' + (rightCellCol - 1)).css('display', 'block');
                        $j('.cl_p2_' + (rightCellRow + 1) + '_' + (rightCellCol - 1)).addClass('eatCls');
                    }
                }
            }
           
            if(leftCellRow <= 8 && leftCellCol <= 8){
                if(allCellsMap[leftCellRow+ '_' + leftCellCol].status == 'E'){
                    $j('.cl_p2_' + (leftCellRow) + '_' + (leftCellCol)).css('display', 'block');
                }
                else if(allCellsMap[leftCellRow + '_' + leftCellCol].status == 'P1') {
                    if(leftCellRow + 1 <= 8
                        && leftCellCol + 1 <= 8
                        && allCellsMap[(leftCellRow + 1)  + '_' + (leftCellCol + 1)].status == 'E'){
                        $j('.cl_p2_' + (leftCellRow + 1) + '_' + (leftCellCol + 1)).css('display', 'block');
                        $j('.cl_p2_' + (leftCellRow + 1) + '_' + (leftCellCol + 1)).addClass('eatCls');
                    }
                }
            }
        }
    }
}

function findKingOptions(player, row, col){
    var opponent = player == 1 ? '2' : '1';
    
    findKingOptionDir(player, opponent, row, col, 'U', 'L');
    findKingOptionDir(player, opponent, row, col, 'U', 'R');
    findKingOptionDir(player, opponent, row, col, 'D', 'L');
    findKingOptionDir(player, opponent, row, col, 'D', 'R');
}



function findKingOptionDir(player, opponent, row, col, dirVert, dirHorz){

    var checkRow = dirVert == 'U' ? row - 1 : row + 1;
    var checkCol = dirHorz == 'L' ? col - 1 : col + 1;
    var prevCellWasOpponent = false;
    var prevCellWasEmpty = false;
    var stopLoop = false;
    var oppositeDir = (dirVert == 'U' ? 'D' : 'U') + (dirHorz == 'L' ? 'R' : 'L');
    
    while(stopLoop == false && checkRow > 0 && checkRow <=8 && checkCol > 0 && checkCol <= 8) {
    
        if(allCellsMap[checkRow + '_' + checkCol].status == ('P' + player)){
            stopLoop = true;
        }
        else if(allCellsMap[checkRow + '_' + checkCol].status == ('P' + opponent)){
            if(prevCellWasOpponent){
                stopLoop = true;
            }
            else{
                prevCellWasOpponent = true;
            }
        }
        else {  //cell is empty
            $j('.cl_p' + player + '_' + checkRow + '_' + checkCol).css('display', 'block');
            
            if(prevCellWasOpponent) {
                $j('.cl_p' + player + '_' + checkRow + '_' + checkCol).addClass('eatCls');
                $j('.cl_p' + player + '_' + checkRow + '_' + checkCol).addClass(oppositeDir + 'Cls');
            }
        }
        
        checkRow = dirVert == 'U' ? checkRow - 1 : checkRow + 1;
        checkCol = dirHorz == 'L' ? checkCol - 1 : checkCol + 1;
    }
}

function optionalCellClicked(player, optionRowClicked, optionColClicked){

    var isEatMove = $j('.cl_p' + player + '_' + (optionRowClicked) + '_' + (optionColClicked)).hasClass('eatCls');
    
    if(clickedOptions.indexOf(optionRowClicked + '_' + optionColClicked) == -1){
        clickedOptions = clickedOptions == '' ? (optionRowClicked + '_' + optionColClicked) : (clickedOptions + ',' + optionRowClicked + '_' + optionColClicked);
    }
    $j('.optionalMoveP' + player).css('display', 'none');
    $j('.optionalMoveP' + player).removeClass('eatCls');
    
    if(isEatMove && canEatMore(player, optionRowClicked, optionColClicked)){
        $j('.cl_p' + player + '_' + (optionRowClicked) + '_' + (optionColClicked)).css('display', 'block');
        $j('.cl_p' + player + '_' + (optionRowClicked) + '_' + (optionColClicked)).addClass('eatClsPre');
    }
    else{
        isEatMove = isEatMove ||  $j('.cl_p' + player + '_' + (optionRowClicked) + '_' + (optionColClicked)).hasClass('eatClsPre');
        $j('.optionalMoveP' + player).removeClass('eatClsPre');
        
        moveToolJS(player, clickedToolRow + '_' + clickedToolCol, clickedOptions, isEatMove);
    }
}

function canEatMore(player, row, col){
    var canEat = false;
    var otherPlayer = player == 1 ? '2' : '1';
    
    if(allCellsMap[clickedToolRow + '_' + clickedToolCol].isKing){
        if($j('.cl_p' + player + '_' + row + '_' + col).hasClass('ULCls') == false
            && isKingCanEat(player, otherPlayer, row, col, 'U', 'L')){
            canEat = true;
        }
        if($j('.cl_p' + player + '_' + row + '_' + col).hasClass('URCls') == false
            && isKingCanEat(player, otherPlayer, row, col, 'U', 'R')){
            canEat = true;
        }
        if($j('.cl_p' + player + '_' + row + '_' + col).hasClass('DLCls') == false
            && isKingCanEat(player, otherPlayer, row, col, 'D', 'L')){
            canEat = true;
        }
        if($j('.cl_p' + player + '_' + row + '_' + col).hasClass('DRCls') == false
            && isKingCanEat(player, otherPlayer, row, col, 'D', 'R')){
            canEat = true;
        }
    }
    else{
        if(canEatCell(player, otherPlayer, row + 1, col + 1, row + 2, col + 2)){
            canEat = true;
        }
        if(canEatCell(player, otherPlayer, row + 1, col - 1, row + 2, col - 2)){
            canEat = true;
        }
        if(canEatCell(player, otherPlayer, row - 1, col + 1, row - 2, col +2)){
            canEat = true;
        }
        if(canEatCell(player, otherPlayer, row - 1, col - 1, row -2, col - 2)){
            canEat = true;
        }
    }
    
    return canEat;
}

function canEatCell(player, otherPlayer, checkRow, checkCol, cellBeyondRow, cellBeyondCol){
    var canEat = false;

    console.log('checkRow cell....' + checkRow + ':' + checkCol );

    if(checkRow <= 8 && checkRow > 0 && checkCol <= 8 && checkCol > 0){
        
        if(allCellsMap[checkRow + '_' + checkCol].status == 'P' + otherPlayer) {
            console.log('belong cell....' + cellBeyondRow + ':' + cellBeyondCol );
            
            if(clickedOptions.indexOf(cellBeyondRow + '_' + cellBeyondCol) == -1
                && cellBeyondRow <= 8 && cellBeyondRow > 0
                && cellBeyondCol <= 8 && cellBeyondCol > 0 
                && allCellsMap[cellBeyondRow + '_' + cellBeyondCol].status == 'E'){
                
                console.log('4canEat:: ' + canEat);
                $j('.cl_p' + player + '_' + cellBeyondRow + '_' + cellBeyondCol).css('display', 'block');
                $j('.cl_p' + player + '_' + cellBeyondRow + '_' + cellBeyondCol).addClass('eatCls');
                canEat = true;
            }
        }
    }

    return canEat;
}

function isKingCanEat(playerNum, opponent, row, col, dirVert, dirHorz){
    var isKingCanEat = false;
    
    var checkRow = dirVert == 'U' ? row - 1 : row + 1;
    var checkCol = dirHorz == 'L' ? col - 1 : col + 1;
    var prevCellWasOpponent = false;
    var stopLoop = false;
    var oppositeDir = (dirVert == 'U' ? 'D' : 'U') + (dirHorz == 'L' ? 'R' : 'L');
        
    while(stopLoop == false && checkRow > 0 && checkRow <=8 && checkCol > 0 && checkCol <= 8) {
        
        console.log('checking cell: ' + checkRow + '_' + checkCol);
        
        if(allCellsMap[checkRow + '_' + checkCol].status == ('P' + playerNum)){
            console.log('player cell: ');
        
            stopLoop = true;
        }
        else if(allCellsMap[checkRow + '_' + checkCol].status == ('P' + opponent)){
            console.log('opponent cell: ');
        
            if(prevCellWasOpponent){
                stopLoop = true;
            }
            else{
                prevCellWasOpponent = true;
            }
        }
        else {  //cell is empty
            console.log('empty cell: ');
        
            if(prevCellWasOpponent){
                isKingCanEat = true;
                $j('.cl_p' + playerNum + '_' + checkRow + '_' + checkCol).css('display', 'block');
                $j('.cl_p' + playerNum + '_' + checkRow + '_' + checkCol).addClass('eatCls');
                $j('.cl_p' + playerNum + '_' + checkRow + '_' + checkCol).addClass(oppositeDir + 'Cls');
            }
        }
            
        checkRow = dirVert == 'U' ? checkRow - 1 : checkRow + 1;
        checkCol = dirHorz == 'L' ? checkCol - 1 : checkCol + 1;
    }
        
        
    return isKingCanEat;
}
</script>

<apex:form id="formId">
<table>
    <tr>
        <td style="width:75%">
            <div class="boardstyle">
                
                    
                <div class="boardTitle">
                    {!gameRecord.Player_1__r.Name} VS {!gameRecord.Player_2__r.Name} {!IF(gameRecord.Status__c == 'Completed', '(' + gameRecord.Game_Summary__c + ')', '')}
                </div>
                
                <div class="playerImg">
                    <img class="{!IF(gameRecord.Player_Turn__c == 'P2', 'playerImgBorder', 'playerWaitImgBorder')}" src="{!IF(isCurrentUser2, gameRecord.Player_1__r.SmallPhotoUrl, gameRecord.Player_2__r.SmallPhotoUrl)}" title="{!IF(isCurrentUser2, gameRecord.Player_1__r.Name, gameRecord.Player_2__r.Name)}"/>
                </div>
                <table>
                    <apex:repeat value="{!l_rows}" var="row">
                        <tr>
                            <apex:repeat value="{!row.l_cells}" var="cell">
                                <td class="{!IF(cell.isEven, 'evenbg', 'oddbg')}">
                                    <!--{!cell.cellIndexId}-->
                                
                                    
                                    <!-- START TEMP 
                                    <div onclick="cellClicked('1', {!cell.rowNumber}, {!cell.colNumber}); return false;" class="player1Tool cl_a1_{!cell.cellIndexId}" style="{!IF(cell.status == 'P1', 'display:block;', 'display:none;')}">
                                        <div class="kingStyle" style="{!IF(cell.isKing, 'display:block;', 'display:none;')}">
                                            &#9813;
                                        </div>
                                    </div>
                                    
                                    <div onclick="cellClicked('2', {!cell.rowNumber}, {!cell.colNumber}); return false;" class="player2Tool cl_a2_{!cell.cellIndexId}" style="{!IF(cell.status == 'P2', 'display:block;', 'display:none;')}">
                                        <div class="kingStyle" style="{!IF(cell.isKing, 'display:block;', 'display:none;')}">
                                            &#9819;
                                        </div>
                                    </div>
                                     END TEMP -->
                                    
                                    <apex:outputPanel rendered="{!isCurrentUser1}">
                                        <div onclick="cellClicked('1', {!cell.rowNumber}, {!cell.colNumber}); return false;" class="player1Tool cl_a1_{!cell.cellIndexId}" style="{!IF(cell.status == 'P1' && gameRecord.Player_Turn__c == 'P1', 'display:block;', 'display:none;')}">
                                            <div class="kingStyle" style="{!IF(cell.isKing, 'display;block;', 'display:none;')}">
                                                &#9813;
                                            </div>
                                        </div>
                                        <div class="player1Tool cl_d1_{!cell.cellIndexId}" style="{!IF(cell.status == 'P1' && gameRecord.Player_Turn__c == 'P2', 'display:block;', 'display:none;')}">
                                            <div class="kingStyle" style="{!IF(cell.isKing, 'display;block;', 'display:none;')}">
                                                &#9813;
                                            </div>
                                        </div>
                                        <div class="player2Tool cl_d2_{!cell.cellIndexId}" style="{!IF(cell.status == 'P2', 'display:block;', 'display:none;')}">
                                            <div class="kingStyle" style="{!IF(cell.isKing, 'display;block;', 'display:none;')}">
                                                &#9819;
                                            </div>
                                        </div>
                                    </apex:outputPanel>
                                    
                                    <apex:outputPanel rendered="{!isCurrentUser2}">
                                        <div onclick="cellClicked('2', {!cell.rowNumber}, {!cell.colNumber}); return false;" class="player2Tool cl_a2_{!cell.cellIndexId}" style="{!IF(cell.status == 'P2' && gameRecord.Player_Turn__c == 'P2', 'display:block;', 'display:none;')}">
                                            <div class="kingStyle" style="{!IF(cell.isKing, 'display;block;', 'display:none;')}">
                                                &#9819;
                                            </div>
                                        </div>
                                        <div class="player2Tool cl_d2_{!cell.cellIndexId}" style="{!IF(cell.status == 'P2' && gameRecord.Player_Turn__c == 'P1', 'display:block;', 'display:none;')}">
                                            <div class="kingStyle" style="{!IF(cell.isKing, 'display;block;', 'display:none;')}">
                                                &#9819;
                                            </div>
                                        </div>
                                        <div class="player1Tool cl_d1_{!cell.cellIndexId}" style="{!IF(cell.status == 'P1', 'display:block;', 'display:none;')}">
                                            <div class="kingStyle" style="{!IF(cell.isKing, 'display;block;', 'display:none;')}">
                                                &#9813;
                                            </div>
                                        </div>
                                    </apex:outputPanel>
                                    
                                    
                                    <apex:outputPanel rendered="{!NOT isCurrentUser1 && NOT isCurrentUser2}">
                                        <div class="player1Tool cl_d1_{!cell.cellIndexId}" style="{!IF(cell.status == 'P1', 'display:block;', 'display:none;')}">
                                            <div class="kingStyle" style="{!IF(cell.isKing, 'display;block;', 'display:none;')}">
                                                &#9813;
                                            </div>
                                        </div>
                                        <div class="player2Tool cl_d2_{!cell.cellIndexId}" style="{!IF(cell.status == 'P2', 'display:block;', 'display:none;')}">
                                            <div class="kingStyle" style="{!IF(cell.isKing, 'display;block;', 'display:none;')}">
                                                &#9819;
                                            </div>
                                        </div>
                                    </apex:outputPanel>
                                    
                                    <div onclick="optionalCellClicked('1', {!cell.rowNumber}, {!cell.colNumber}); return false;" class="optionalMoveP1 cl_p1_{!cell.cellIndexId}" style="display:none;" />
                                    <div onclick="optionalCellClicked('2', {!cell.rowNumber}, {!cell.colNumber}); return false;" class="optionalMoveP2 cl_p2_{!cell.cellIndexId}" style="display:none;" />
                                </td>
                            </apex:repeat>
                        </tr>
                    </apex:repeat>
                </table>
                
                <div class="playerImg">
                    <img class="{!IF(gameRecord.Player_Turn__c == 'P1', 'playerImgBorder', 'playerWaitImgBorder')}" src="{!IF(NOT isCurrentUser2, gameRecord.Player_1__r.SmallPhotoUrl, gameRecord.Player_2__r.SmallPhotoUrl)}" title="{!IF(NOT isCurrentUser2, gameRecord.Player_1__r.Name, gameRecord.Player_2__r.Name)}"/>
                </div>
            </div>
            
        </td>
        <td style="width:25%; vertical-align: top;">
            <div class="movementsPanel">
                <table cellspacing="0" cellpadding="0" style="min-width: 200px;">
                    <tr>
                        <th>No.</th>
                        <th>Player 1</th>
                        <th>Player 2</th>
                    </tr>
                    <apex:repeat value="{!l_movementItems}" var="moveItem">
                        <tr>
                            <td>{!moveItem.index}</td>
                            <td><apex:outputText value="{!moveItem.player1Move}" escape="false"/></td>
                            <td><apex:outputText value="{!moveItem.player2Move}" escape="false"/></td>
                        </tr>
                    </apex:repeat>
                </table>
            </div>
        </td>
    </tr>
</table>

<apex:actionFunction name="moveToolJS" action="{!moveTool}" reRender="formId,globalVars">
    <apex:param name="pnum" value=""/>
    <apex:param name="fcell" value=""/>
    <apex:param name="tcell" value=""/>
    <apex:param name="iseatmove" value=""/>
</apex:actionFunction>

<apex:actionFunction name="refreshBoardJS" action="{!refreshBoard}" reRender="formId,globalVars"/>

</apex:form>

</apex:page>